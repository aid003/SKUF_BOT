import express, { Request, Response, Application } from "express";
import { PaymentStatus, PaymentMethod } from "@prisma/client";
import cors from "cors";
import { config } from "./config";
import { bot, prisma } from ".";
import { logger } from "./logger/logger";

const app: Application = express();

app.use(express.raw({ type: "*/*" }));
app.use(cors());

function mapPaymentMethod(
  prodamusMethod: string | undefined
): PaymentMethod | null {
  if (!prodamusMethod) return null;
  const methodLower = prodamusMethod.toLowerCase();

  switch (methodLower) {
    case "ac":
    case "ackz":
    case "acf":
      return PaymentMethod.CARD;
    case "sbp":
      return PaymentMethod.SBP;
    case "qw":
    case "qiwi":
      return PaymentMethod.QIWI;
    case "pc":
    case "yandex":
      return PaymentMethod.YANDEX;
    case "paypal":
      return PaymentMethod.PAYPAL;
    case "crypto":
      return PaymentMethod.CRYPTO;
    default:
      logger.warn(
        `‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payment_method –∏–∑ –ü—Ä–æ–¥–∞–º—É—Å–∞: ${prodamusMethod}`
      );
      return null;
  }
}

app.post(
  "/webhook/payment",
  async (req: Request, res: Response): Promise<void> => {
    try {
      const rawBody = req.body.toString("utf8"); // –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
      logger.info("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞ (RAW):", rawBody);

      const data = JSON.parse(rawBody);
      const { order_id, amount, status, user_id, payment_method } = data;

      if (!order_id || !amount || !status || !user_id) {
        logger.warn(
          "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è)."
        );
        res.status(400).send("Invalid request data");
        return;
      }

      if (typeof user_id !== "string" || !/^\d+$/.test(user_id)) {
        logger.warn(`‚ö†Ô∏è user_id –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º: ${user_id}`);
        res.status(400).send("Invalid user_id");
        return;
      }

      const userId = BigInt(user_id);
      const parsedAmount = parseFloat(amount);

      if (isNaN(parsedAmount)) {
        logger.error(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ amount: ${amount}`);
        res.status(400).send("Invalid amount format");
        return;
      }

      const user = await prisma.telegramUser.findUnique({ where: { userId } });
      if (!user) {
        logger.warn(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: ${userId}`);
        res.status(404).send("User not found");
        return;
      }

      const paymentMethodEnum = mapPaymentMethod(payment_method);

      try {
        await prisma.payment.upsert({
          where: { orderId: order_id },
          update: {
            status: status.toUpperCase() as PaymentStatus,
            paymentMethod: paymentMethodEnum,
          },
          create: {
            userId,
            orderId: order_id,
            amount: parsedAmount,
            status: status.toUpperCase() as PaymentStatus,
            paymentMethod: paymentMethodEnum,
          },
        });

        logger.info(`‚úÖ –û–ø–ª–∞—Ç–∞ ${order_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${status}`);
      } catch (dbError) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", dbError);
        res.status(500).send("Database error");
        return;
      }

      try {
        if (status === "success") {
          await bot.telegram.sendMessage(
            user.userId.toString(),
            `‚úÖ –û–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É ${parsedAmount} RUB —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n\n–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫...`
          );
          logger.info(
            `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`
          );
        } else if (status === "pending") {
          await bot.telegram.sendMessage(
            user.userId.toString(),
            `‚åõ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ —Å—É–º–º—É ${parsedAmount} RUB –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!`
          );
          logger.info(
            `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ PENDING –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`
          );
        } else {
          await bot.telegram.sendMessage(
            user.userId.toString(),
            `‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`
          );
          logger.warn(
            `üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`
          );
        }
      } catch (tgError) {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}:`,
          tgError
        );
      }

      res.sendStatus(200);
    } catch (error) {
      logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:", error);
      res.sendStatus(500);
    }
  }
);

app.listen(config.port, () => {
  logger.info(`üöÄ Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
});
