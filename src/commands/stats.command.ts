import { Telegraf } from "telegraf";
import { logger } from "../logger/logger";
import { prisma } from "..";

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (role = 'admin').
 */
async function isUserAdmin(userId: number): Promise<boolean> {
  const user = await prisma.telegramUser.findUnique({
    where: { userId: BigInt(userId) },
  });
  return user?.role === "admin";
}

/**
 * –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥—ã /stats
 * –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–Ω–∞—á–µ ‚Äî –º–æ–ª—á–∏—Ç.
 */
export function setupStatsCommand(bot: Telegraf) {
  bot.command("stats", async (ctx) => {
    try {
      // –ï—Å–ª–∏ –Ω–µ—Ç ctx.from, –Ω–µ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!ctx.from) {
        return; // –º–æ–ª—á–∏–º
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏
      const adminCheck = await isUserAdmin(ctx.from.id);
      if (!adminCheck) {
        // –ù–µ –∞–¥–º–∏–Ω ‚Äî –º–æ–ª—á–∏–º
        return;
      }

      // =============== –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ===============
      // 1) –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const totalUsers = await prisma.telegramUser.count();

      // 2) –°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –∞–¥–º–∏–Ω–æ–≤
      const totalAdmins = await prisma.telegramUser.count({
        where: { role: "admin" },
      });

      // 3) –°–∫–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è
      const startOfDay = new Date();
      startOfDay.setUTCHours(0, 0, 0, 0);
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ setHours(0,0,0,0)

      const registeredToday = await prisma.telegramUser.count({
        where: {
          createdAt: {
            gte: startOfDay,
          },
        },
      });

      // 4) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –≤ —Å—Ö–µ–º–µ –µ—Å—Ç—å –ø–æ–ª–µ isPremium)
      const premiumCount = await prisma.telegramUser.count({
        where: { isPremium: true },
      });

      // =============== –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞ ===============
      let statsMessage = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n";
      statsMessage += `‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*\n`;
      statsMessage += `  (–∏–∑ –Ω–∏—Ö –∞–¥–º–∏–Ω–æ–≤: *${totalAdmins}*)\n`;
      statsMessage += `‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: *${registeredToday}*\n`;
      statsMessage += `‚Ä¢ –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${premiumCount}*\n`;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      await ctx.reply(statsMessage, { parse_mode: "Markdown" });
    } catch (error) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é/–∞–¥–º–∏–Ω—É –º–æ–∂–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /stats:", error);
    }
  });
}
