import { Telegraf, Markup } from "telegraf";
import { escapeMarkdownV2 } from "../helpers/escapeMarkdownV2";
import { logger } from "../logger/logger";
import { safeExecute } from "../helpers/safeExecute";
import { prisma } from "..";
import { config } from "../config";

export function setupStartCommand(bot: Telegraf) {
  bot.start(async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn("ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start");
        return;
      }

      const userData = {
        userId: BigInt(ctx.from.id),
        isBot: ctx.from.is_bot,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name || null,
        username: ctx.from.username || null,
        languageCode: ctx.from.language_code || null,
        isPremium: ctx.from.is_premium ?? false,
        addedToAttachmentMenu: ctx.from.added_to_attachment_menu ?? false,
      };

      try {
        const existingUser = await prisma.telegramUser.findUnique({
          where: { userId: userData.userId },
        });

        if (!existingUser) {
          await prisma.telegramUser.create({ data: userData });
          logger.info(
            `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${ctx.from.id} (${ctx.from.username}).`
          );
        } else {
          await prisma.telegramUser.update({
            where: { userId: userData.userId },
            data: {
              isBot: userData.isBot,
              firstName: userData.firstName,
              lastName: userData.lastName,
              username: userData.username,
              languageCode: userData.languageCode,
              isPremium: userData.isPremium,
              addedToAttachmentMenu: userData.addedToAttachmentMenu,
            },
          });
          logger.info(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª /start: ID=${ctx.from.id} (${ctx.from.username}).`
          );
        }
      } catch (dbError: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î:", dbError);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
        return;
      }

      const safeFirstName = escapeMarkdownV2(ctx.from.first_name || "–ì–æ—Å—Ç—å");
      const message =
        `*${safeFirstName}*, –Ω–∞ —Å–≤—è–∑–∏ *–°–∫—É—Ñ—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞*üëã\n\n` +
        `_–ë–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ\\!_\n\n` +
        `–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–µ–ª–ª–µ—Ä–∞–º –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å\\.\n\n` +
        `–ü–æ–¥–æ–±–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–µ —á–∞—â–µ 2—Ö —Ä–∞–∑ –≤ –º–µ—Å—è—Ü\\.\n\n` +
        `–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ *"–û–ø–ª–∞—Ç–∏—Ç—å"*\\.\n\n` +
        `–ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"*`;

      try {
        await ctx.reply(message, {
          parse_mode: "MarkdownV2",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay")],
            [
              Markup.button.callback(
                "üì¢ –ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "send_announcement"
              ),
            ],
          ]),
        });
      } catch (tgError: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", tgError);
      }
    });
  });

  bot.action("pay", async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'pay', –Ω–æ ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
        return;
      }

      const paymentLink = "https://example.com/payment";
      const message = `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–û–ø–ª–∞—Ç–∏—Ç—å](${paymentLink})`;

      try {
        await ctx.reply(message, { parse_mode: "MarkdownV2" });
      } catch (tgError: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:", tgError);
      }

      try {
        await ctx.answerCbQuery();
      } catch (tgError: any) {
        logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ answerCbQuery:", tgError);
      }

      logger.info(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} (${ctx.from.username}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å".`
      );
    });
  });

  bot.action("send_announcement", async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn(
          "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'send_announcement', –Ω–æ ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        );
        return;
      }

      try {
        const response = await fetch(`${config.strapiUrl}/announcements`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ API: ${response.statusText}`);

        const data = await response.json();

        if (!data || !data.data || !Array.isArray(data.data)) {
          throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Strapi");
        }

        interface Announcement {
          title: string;
          date: Date;
          content?: string;
        }

        const announcements: Announcement[] = data.data
          .map((item: { title?: string; date?: string; content?: string }) => {
            if (!item.title || !item.date) {
              logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–Ω–æ–Ω—Å–∞:", JSON.stringify(item));
              return null;
            }
            return {
              title: item.title,
              date: new Date(item.date),
              content: item.content?.trim() || null,
            };
          })
          .filter((a: Announcement | null): a is Announcement => a !== null)
          .sort(
            (a: Announcement, b: Announcement) =>
              a.date.getTime() - b.date.getTime()
          );

        if (announcements.length === 0) {
          await ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", {
            parse_mode: "MarkdownV2",
          });
          return;
        }

        const nextEvent = announcements[0];
        const otherEvents = announcements.slice(1);

        const formatDateTime = (date: Date): string =>
          date.toLocaleString("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
          });

        const escapeMarkdownV2 = (text: string): string => {
          return text.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, "\\$1");
        };

        let message =
          `üìÖ *–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ*\n\n` +
          `üëâ *–¢–µ–º–∞:* ${escapeMarkdownV2(nextEvent.title)}\n` +
          `‚è±Ô∏è *–î–∞—Ç–∞:* ${escapeMarkdownV2(formatDateTime(nextEvent.date))}\n`;

        if (nextEvent.content) {
          message += `üì¢ ${escapeMarkdownV2(nextEvent.content)}\n`;
        }

        if (otherEvents.length > 0) {
          message += `\n\nüíº *–î—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n`;
          otherEvents.forEach((event: Announcement) => {
            message +=
              `\nüëâ *–¢–µ–º–∞:* ${escapeMarkdownV2(event.title)}\n` +
              `‚è±Ô∏è *–î–∞—Ç–∞:* ${escapeMarkdownV2(formatDateTime(event.date))}\n`;
            if (event.content) {
              message += `üì¢ ${escapeMarkdownV2(event.content)}\n`;
            }
          });
        }

        await ctx.reply(message, { parse_mode: "MarkdownV2" });
      } catch (error: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–æ–Ω—Å–æ–≤:", error);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", {
          parse_mode: "MarkdownV2",
        });
      }

      try {
        await ctx.answerCbQuery();
      } catch (tgError: any) {
        logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ answerCbQuery:", tgError);
      }
    });
  });
}
