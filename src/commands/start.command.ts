import { Telegraf, Markup } from "telegraf";
import { escapeMarkdownV2 } from "../helpers/escapeMarkdownV2";
import { logger } from "../logger/logger";
import { safeExecute } from "../helpers/safeExecute";
import { prisma } from "..";
import { config } from "../config";
import { PaymentStatus } from "@prisma/client";
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º node-fetch (–∏–ª–∏ –¥—Ä—É–≥—É—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É), –µ—Å–ª–∏ –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ Node.js –Ω–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ fetch
import fetch from "node-fetch";

// –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è HMAC-–ø–æ–¥–ø–∏—Å–∏ (–µ—Å–ª–∏ –≤ –≤–∞—à–µ–º –ü—Ä–æ–¥–∞–º—É—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –ø–æ–¥–ø–∏—Å—å).
import crypto from "crypto";

export function setupStartCommand(bot: Telegraf) {
  bot.start(async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn("ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /start");
        return;
      }

      const userData = {
        userId: BigInt(ctx.from.id),
        isBot: ctx.from.is_bot,
        firstName: ctx.from.first_name,
        lastName: ctx.from.last_name || null,
        username: ctx.from.username || null,
        languageCode: ctx.from.language_code || null,
        isPremium: ctx.from.is_premium ?? false,
        addedToAttachmentMenu: ctx.from.added_to_attachment_menu ?? false,
      };

      try {
        const existingUser = await prisma.telegramUser.findUnique({
          where: { userId: userData.userId },
        });

        if (!existingUser) {
          await prisma.telegramUser.create({ data: userData });
          logger.info(
            `–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID=${ctx.from.id} (${ctx.from.username}).`
          );
        } else {
          await prisma.telegramUser.update({
            where: { userId: userData.userId },
            data: {
              isBot: userData.isBot,
              firstName: userData.firstName,
              lastName: userData.lastName,
              username: userData.username,
              languageCode: userData.languageCode,
              isPremium: userData.isPremium,
              addedToAttachmentMenu: userData.addedToAttachmentMenu,
            },
          });
          logger.info(
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª /start: ID=${ctx.from.id} (${ctx.from.username}).`
          );
        }
      } catch (dbError: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î:", dbError);
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!");
        return;
      }

      const safeFirstName = escapeMarkdownV2(ctx.from.first_name || "–ì–æ—Å—Ç—å");
      const message =
        `*${safeFirstName}*, –Ω–∞ —Å–≤—è–∑–∏ *–°–∫—É—Ñ—ã –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞*üëã\n\n` +
        `_–ë–ª–∞–≥–æ–¥–∞—Ä—é —Ç–µ–±—è –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ\\!_\n\n` +
        `–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è—Ö, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥–∞—é—Ç —Å–µ–ª–ª–µ—Ä–∞–º –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å\\.\n\n` +
        `–ü–æ–¥–æ–±–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—ã—á–Ω–æ –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–µ —á–∞—â–µ 2—Ö —Ä–∞–∑ –≤ –º–µ—Å—è—Ü\\.\n\n` +
        `–î–ª—è –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–∏—è –≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ *"–û–ø–ª–∞—Ç–∏—Ç—å"*\\.\n\n` +
        `–ï—Å–ª–∏ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É *"–ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã"*`;

      try {
        await ctx.reply(message, {
          parse_mode: "MarkdownV2",
          ...Markup.inlineKeyboard([
            [Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", "pay")],
            [
              Markup.button.callback(
                "üì¢ –ü—Ä–∏—Å–ª–∞—Ç—å –∞–Ω–æ–Ω—Å –±–ª–∏–∂–∞–π—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã",
                "send_announcement"
              ),
            ],
          ]),
        });
      } catch (tgError: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", tgError);
      }
    });
  });

  /**
   * –ü—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ "–û–ø–ª–∞—Ç–∏—Ç—å":
   * 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π orderId
   * 2) –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å POST –∫ –ü—Ä–æ–¥–∞–º—É—Å—É —Å do=link, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É–ª—Å—è –∫–æ—Ä–æ—Ç–∫–∏–π URL
   * 3) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç—ë–∂ –≤ –ë–î (—Å—Ç–∞—Ç—É—Å PENDING)
   * 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ä–æ—Ç–∫—É—é —Å—Å—ã–ª–∫—É
   */
  bot.action("pay", async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'pay', –Ω–æ ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
        return;
      }

      const userId = BigInt(ctx.from.id);
      const orderId = `order_${userId}_${Date.now()}`;
      const price = config.amount ? Number(config.amount) : 2000;

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ü—Ä–æ–¥–∞–º—É—Å–∞.
      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –≤–∞–º –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è:
      // - products (–º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤),
      // - order_id, user_id,
      // - do=link,
      // - type=json,
      // - callbackType=json,
      // - –≤–æ–∑–º–æ–∂–Ω–æ, signature (HMAC).
      const prodamusPayload: any = {
        do: "link",
        type: "json", // —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –≤ JSON
        // callbackType: "json",  // –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∏ —ç—Ç–æ
        order_id: orderId, // –≤–∞–º –Ω—É–∂–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤ –≤–µ–±—Ö—É–∫–µ
        products: [
          {
            name: "–û–ø–ª–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
            price: price,
            quantity: 1,
          },
        ],
        // user_id: userId, // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤ —Ñ–æ—Ä–º–µ
        // ... –¥—Ä—É–≥–∏–µ –ø–æ–ª—è (phone, email) –ø–æ –∂–µ–ª–∞–Ω–∏—é
      };

      // --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–¥–ø–∏—Å—å HMAC, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –ü—Ä–æ–¥–∞–º—É—Å–µ
      if (process.env.PRODAMUS_SECRET_KEY) {
        // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–µ–π—à–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∏
        const secret = process.env.PRODAMUS_SECRET_KEY;
        const sortedKeys = Object.keys(prodamusPayload).sort();
        const dataString = sortedKeys
          .map((k) => `${k}=${JSON.stringify(prodamusPayload[k])}`)
          .join("&");

        const hmac = crypto.createHmac("sha256", secret!);
        hmac.update(dataString);
        const signature = hmac.digest("hex");

        prodamusPayload.signature = signature;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å POST –Ω–∞ config.paymentUrl
      // –ü—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:
      let paymentLink: string | undefined = undefined;
      try {
        const response = await fetch(config.paymentUrl, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(prodamusPayload),
        });

        if (!response.ok) {
          const textBody = await response.text();
          throw new Error(
            `–ó–∞–ø—Ä–æ—Å –∫ –ü—Ä–æ–¥–∞–º—É—Å—É –Ω–µ —É—Å–ø–µ—à–µ–Ω: ${response.status} / ${textBody}`
          );
        }

        const data = await response.json();
        // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ü—Ä–æ–¥–∞–º—É—Å –≤–µ—Ä–Ω—ë—Ç —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ { "link": "https://payform.ru/nj6H3Oq/" }
        if (!data.link) {
          throw new Error("–í –æ—Ç–≤–µ—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ link");
        }

        paymentLink = data.link;
      } catch (err) {
        logger.error(
          "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä–æ—Ç–∫–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ü—Ä–æ–¥–∞–º—É—Å–∞:",
          err
        );
        // –ú–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await ctx.reply(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        );
        return;
      }

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –ë–î
      try {
        await prisma.payment.create({
          data: {
            userId,
            orderId,
            amount: price,
            status: PaymentStatus.PENDING,
            paymentMethod: null,
          },
        });
        logger.info(`–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ ${orderId} (PENDING)`);
      } catch (dbError: any) {
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", dbError);
        // –°–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É
      // –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ Telegram –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —ç–∫—Ä–∞–Ω ‚Äî –æ–Ω –º–æ–∂–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É
      if (paymentLink) {
        const msg =
          `üí≥ *–û–ø–ª–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n\n` +
          `–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: [${paymentLink}](${paymentLink})\n\n` +
          `–ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ Telegram —Å—Å—ã–ª–∫–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.`;

        try {
          await ctx.reply(msg, {
            parse_mode: "MarkdownV2",
            ...Markup.inlineKeyboard([
              [Markup.button.url("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", paymentLink)],
            ]),
          });
          logger.info(
            `–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞ ${paymentLink} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`
          );
        } catch (tgError: any) {
          logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É:", tgError);
        }
      }

      try {
        await ctx.answerCbQuery();
      } catch (tgError: any) {
        logger.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ answerCbQuery:", tgError);
      }
    });
  });

  bot.action("send_announcement", async (ctx) => {
    await safeExecute(ctx, async () => {
      if (!ctx.from) {
        logger.warn(
          "–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ 'send_announcement', –Ω–æ ctx.from –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
        );
        return;
      }

      try {
        const response = await fetch(`${config.strapiUrl}/announcements`);
        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ API: ${response.statusText}`);

        const data = await response.json();

        if (!data || !data.data || !Array.isArray(data.data)) {
          throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Strapi");
        }

        interface Announcement {
          title: string;
          date: Date;
          content?: string;
        }

        const announcements: Announcement[] = data.data
          .map((item: { title?: string; date?: string; content?: string }) => {
            if (!item.title || !item.date) {
              logger.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç –∞–Ω–æ–Ω—Å–∞:", JSON.stringify(item));
              return null;
            }
            return {
              title: item.title,
              date: new Date(item.date),
              content: item.content?.trim() || null,
            };
          })
          .filter((a: Announcement): a is Announcement => a !== null)
          .sort(
            (a: Announcement, b: Announcement) =>
              a.date.getTime() - b.date.getTime()
          );

        if (announcements.length === 0) {
          await ctx.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.", {
            parse_mode: "MarkdownV2",
          });
          return;
        }

        const nextEvent = announcements[0];
        const otherEvents = announcements.slice(1);

        const formatDateTime = (date: Date): string =>
          date.toLocaleString("ru-RU", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
            hour12: true,
          });

        const escapeMD = (text: string): string => {
          return text.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, "\\$1");
        };

        let message =
          `üìÖ *–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ*\n\n` +
          `üëâ *–¢–µ–º–∞:* ${escapeMD(nextEvent.title)}\n` +
          `‚è±Ô∏è *–î–∞—Ç–∞:* ${escapeMD(formatDateTime(nextEvent.date))}\n`;

        if (nextEvent.content) {
          message += `üì¢ ${escapeMD(nextEvent.content)}\n`;
        }

        if (otherEvents.length > 0) {
          message += `\n\nüíº *–î—Ä—É–≥–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è*\n`;
          otherEvents.forEach((event) => {
            message +=
              `\nüëâ *–¢–µ–º–∞:* ${escapeMD(event.title)}\n` +
              `‚è±Ô∏è *–î–∞—Ç–∞:* ${escapeMD(formatDateTime(event.date))}\n`;
            if (event.content) {
              message += `üì¢ ${escapeMD(event.content)}\n`;
            }
          });
        }

        await ctx.reply(message, { parse_mode: "MarkdownV2" });
      } catch (error: any) {
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–æ–Ω—Å–æ–≤:", error);
        await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", {
          parse_mode: "MarkdownV2",
        });
      }

      try {
        await ctx.answerCbQuery();
      } catch (tgError: any) {
        logger.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ answerCbQuery:", tgError);
      }
    });
  });
}
